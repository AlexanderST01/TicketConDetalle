@page "/ConsultaTicket"
@inject HttpClient httpClient

<div>
    <div class="row justify-content-start ">
        <div class=" col-sm-7 col-md-7 col-lg-10 col-xl-xxl-9 ">
            <div class="card">
                <div class="card-header">
                    <h1>Consulta Ticket</h1>
                    <div class="row">
                        <div class="col mb-3">
                            <label>Desde: </label>
                            <InputDate @bind-Value="Desde" class="form-control "></InputDate>
                        </div>
                        <div class="col mb-3">
                            <label>Hasta: </label>
                            <InputDate @bind-Value="Hasta" class="form-control "></InputDate>
                        </div>
                        <div class="row">
                            <label>filtrar por</label>
                            <div class="col">
                                <InputSelect class="form-select" @bind-Value="opciones">
                                    <option value="0" selected>ID</option>
                                    <option value="1">Solicitado por</option>
                                    <option value="2">Asunto</option>
                                    <option value="3">Descripcion</option>
                                </InputSelect>
                            </div>
                            <div class="col input-group">
                                <button class="form-control oi oi-magnifying-glass" type="button" @onclick="Buscar"></button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">

                                @switch (opciones)
                                {
                                    case 0:
                                        <InputNumber class="form-control" @bind-Value="ticketAuxiliar.TicketId"></InputNumber>
                                        break;

                                    case 1:
                                        <InputText class="form-control" @bind-Value="ticketAuxiliar.SolicitadoPor"></InputText>
                                        break;
                                    case 2:
                                        <InputText class="form-control" @bind-Value="ticketAuxiliar.Asunto"></InputText>
                                        break;
                                    case 3:
                                        <InputText class="form-control" @bind-Value="ticketAuxiliar.Descripcion"></InputText>
                                        break;
                                }
                            </div>
                        </div>
                        @*<div class="input-group">
                            <InputNumber @bind-Value="ID" class="form-control"></InputNumber>
                            <button type="button" class="btn btn-outline-info oi oi-magnifying-glass" @onclick="Buscar"></button>
                        </div>*@
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive ">
                        <table border="1" class="table table-bordered table-striped ">
                            <thead>
                                <tr class="table-secondary">
                                    <th>ID</th>
                                    <th>Fecha</th>
                                    <th>Cliente ID</th>
                                    <th>Solicitado por</th>
                                    <th>Asunto</th>
                                    <th>Descripci&oacute;n</th>
                                    <th>Ver</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tabla in tickets)
                                {
                                    <tr>
                                        <td>@tabla.TicketId</td>
                                        <td>@tabla.Fecha.ToString("MM/dd/yyyy")</td>
                                        <td>@tabla.ClienteId</td>
                                        <td>@tabla.SolicitadoPor</td>
                                        <td>@tabla.Asunto</td>
                                        <td>@tabla.Descripcion</td>
                                        <td><a href="RegistroTicket/@tabla.TicketId">ver</a></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <span>Conteo: @Conteo</span>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Tickets> tickets { get; set; } = new List<Tickets>();

    public int ID { get; set; }
    public Tickets ticketAuxiliar = new();
    public int Conteo;
    public int opciones;
    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }

    protected override void OnInitialized()
    {
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        switch (opciones)
        {
            case 0:
                if (ticketAuxiliar.TicketId == 0)
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                else
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.TicketId == ticketAuxiliar.TicketId && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                break;

            case 1:
                if (string.IsNullOrEmpty(ticketAuxiliar.SolicitadoPor))
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                else
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.SolicitadoPor
                        .Contains(ticketAuxiliar.SolicitadoPor, StringComparison.OrdinalIgnoreCase) 
                        && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                break;

            case 2:
                if (string.IsNullOrEmpty(ticketAuxiliar.Asunto))
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                else
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.Asunto
                        .Contains(ticketAuxiliar.Asunto, StringComparison.OrdinalIgnoreCase)
                        && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                break;

            case 3:
                if (string.IsNullOrEmpty(ticketAuxiliar.Descripcion))
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                else
                {
                    tickets = (await httpClient.GetFromJsonAsync<List<Tickets>>($"api/Tickets")).Where(t => t.Descripcion
                        .Contains(ticketAuxiliar.Descripcion, StringComparison.OrdinalIgnoreCase)
                        && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                break;
        }
        Conteo = tickets != null ? tickets!.Count() : 0;
    }
}
